name: STEP Spatial Metadata Processor

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

jobs:
  code_quality_check:
    runs-on: ubuntu-latest
    steps:
      - name: üõéÔ∏è Checkout repository
        uses: actions/checkout@v3

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: üêç Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üßπ Run autoflake to remove unused imports
        run: |
          autoflake --in-place --recursive --remove-unused-variables --remove-all-unused-imports src

      - name: üíÄ Run vulture to find dead code
        run: |
          vulture src || echo "‚ö†Ô∏è Vulture found unused code ‚Äî review manually if needed"

      - name: üöÄ Commit autoflake changes
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          git config --global user.name "${GIT_USER_NAME}"
          git config --global user.email "${GIT_USER_EMAIL}"
          git add .
          git diff --cached --quiet || (
            git commit -m "üßπ Auto-clean: removed unused imports and variables"
            git push || echo "No changes to push"
          )

  process_step_for_coordinates:
    needs: code_quality_check
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
      ENABLE_RULE_DEBUG: true

    steps:
      - name: üõéÔ∏è Checkout repository
        uses: actions/checkout@v3
        with:
          # Token is needed for the final commit/push of logs/error reports
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: üß± Install system dependencies & Gmsh
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglu1-mesa-dev \
            libfreetype6-dev \
            libfontconfig1-dev \
            libxrender1 \
            gmsh

      - name: üêç Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: ‚úÖ Confirm Gmsh & Python bindings
        run: |
          gmsh -version || { echo "‚ùå Gmsh CLI not found"; exit 1; }
          python -c "import gmsh; gmsh.initialize(); gmsh.finalize(); print('‚úÖ Gmsh Python bindings operational')" || { echo "‚ùå Gmsh Python bindings failed"; exit 1; }

      - name: üßπ Cleanup previous integration test errors
        run: |
          rm -f tests/integration_tests_errors/*.txt || echo "‚ö†Ô∏è No previous error files to remove"
          
      - name: ‚òÅÔ∏è Download & normalize STEP file
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: |
          chmod +x src/download_from_dropbox.sh
          src/download_from_dropbox.sh

          STEP_FILES=$(find data/testing-input-output -maxdepth 1 -type f -name "*.step")
          COUNT=$(echo "$STEP_FILES" | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "‚ùå No STEP file found. Cannot proceed."
            exit 1
          elif [ "$COUNT" -gt 1 ]; then
            echo "‚ö†Ô∏è Multiple STEP files found. Normalizing..."
            STEP_FILE=$(echo "$STEP_FILES" | head -n 1)
            mv "$STEP_FILE" data/testing-input-output/input.step
            echo "‚úÖ Normalized STEP file to input.step."
          else
            STEP_FILE=$(echo "$STEP_FILES")
            if [ "$STEP_FILE" != "data/testing-input-output/input.step" ]; then
              mv "$STEP_FILE" data/testing-input-output/input.step
              echo "‚úÖ Renamed $STEP_FILE to input.step"
            else
              echo "‚ÑπÔ∏è STEP file is already named input.step. No renaming needed."
            fi
          fi

      # ----------------------------------------------------------------------
      # Integration Test 1: test_cube_no_slip (HARD FAIL on mismatch)
      # ----------------------------------------------------------------------
      - name: üèÉ Run Integration Test (test_cube_no_slip)
        id: integration_test_cube_no_slip
        run: |
          STEP_FILE="tests/test_models/test_cube.step"
          EXPECTED_OUTPUT_PATH="tests/test_models/test_cube_output_no_slip.json"
          TEMP_OUTPUT_FILE="tests/test_models/test_cube_cli_output_no_slip.json"

          if [ ! -f "$STEP_FILE" ]; then
            echo "‚ùå Fatal Error: STEP file ($STEP_FILE) not found. Cannot run integration test."
            exit 1
          fi
          if [ ! -f "$EXPECTED_OUTPUT_PATH" ]; then
            echo "‚ùå Fatal Error: Expected Output file ($EXPECTED_OUTPUT_PATH) not found. Cannot run integration test."
            exit 1
          fi

          echo "--- Running test: test_cube_no_slip (Expected Output: $EXPECTED_OUTPUT_PATH) ---"

          RESOLUTION=0.5
          FLOW_REGION="internal"

          python3 src/gmsh_runner.py \
            --step "$STEP_FILE" \
            --resolution "$RESOLUTION" \
            --flow_region "$FLOW_REGION" \
            --no_slip true \
            --output "$TEMP_OUTPUT_FILE"

          python3 tests/helpers/compare_json.py "$EXPECTED_OUTPUT_PATH" "$TEMP_OUTPUT_FILE"

          echo "‚úÖ Integration test completed for test_cube_no_slip."

      # ----------------------------------------------------------------------
      # Integration Test 2: hollow_cylinder_no_slip (HARD FAIL on mismatch)
      # ----------------------------------------------------------------------
      - name: üèÉ Run Integration Test (hollow_cylinder_no_slip)
        id: integration_test_cylinder_no_slip
        run: |
          STEP_FILE="tests/test_models/hollow_cylinder.step"
          EXPECTED_OUTPUT_PATH="tests/test_models/hollow_cylinder_internal_output_no_slip.json"
          TEMP_OUTPUT_FILE="tests/test_models/hollow_cylinder_cli_output_no_slip.json"

          if [ ! -f "$STEP_FILE" ]; then
            echo "‚ùå Fatal Error: STEP file ($STEP_FILE) not found. Cannot run integration test."
            exit 1
          fi
          if [ ! -f "$EXPECTED_OUTPUT_PATH" ]; then
            echo "‚ùå Fatal Error: Expected Output file ($EXPECTED_OUTPUT_PATH) not found. Cannot run integration test."
            exit 1
          fi

          echo "--- Running test: hollow_cylinder_no_slip (Expected Output: $EXPECTED_OUTPUT_PATH) ---"

          RESOLUTION=0.5
          FLOW_REGION="internal"

          python3 src/gmsh_runner.py \
            --step "$STEP_FILE" \
            --resolution "$RESOLUTION" \
            --flow_region "$FLOW_REGION" \
            --no_slip true \
            --output "$TEMP_OUTPUT_FILE"

          python3 tests/helpers/compare_json.py "$EXPECTED_OUTPUT_PATH" "$TEMP_OUTPUT_FILE"

          echo "‚úÖ Integration test completed for hollow_cylinder_no_slip."

      # ----------------------------------------------------------------------
      # Integration Test 3: cube_with_hole_no_slip (HARD FAIL on mismatch)
      # ----------------------------------------------------------------------
      - name: üèÉ Run Integration Test (cube_with_hole_no_slip)
        id: integration_test_cube_with_hole_no_slip
        run: |
          STEP_FILE="tests/test_models/cube_with_hole.step"
          EXPECTED_OUTPUT_PATH="tests/test_models/cube_with_hole_internal_output_no_slip.json"
          TEMP_OUTPUT_FILE="tests/test_models/cube_with_hole_cli_output_no_slip.json"

          if [ ! -f "$STEP_FILE" ]; then
            echo "‚ùå Fatal Error: STEP file ($STEP_FILE) not found. Cannot run integration test."
            exit 1
          fi
          if [ ! -f "$EXPECTED_OUTPUT_PATH" ]; then
            echo "‚ùå Fatal Error: Expected Output file ($EXPECTED_OUTPUT_PATH) not found. Cannot run integration test."
            exit 1
          fi

          echo "--- Running test: cube_with_hole_no_slip (Expected Output: $EXPECTED_OUTPUT_PATH) ---"

          RESOLUTION=0.5
          FLOW_REGION="internal"

          python3 src/gmsh_runner.py \
            --step "$STEP_FILE" \
            --resolution "$RESOLUTION" \
            --flow_region "$FLOW_REGION" \
            --no_slip true \
            --output "$TEMP_OUTPUT_FILE"

          python3 tests/helpers/compare_json.py "$EXPECTED_OUTPUT_PATH" "$TEMP_OUTPUT_FILE"

          echo "‚úÖ Integration test completed for cube_with_hole_no_slip."

      # ----------------------------------------------------------------------
      # Integration Test 4: test_cube_slip (HARD FAIL on mismatch)
      # ----------------------------------------------------------------------
      - name: üèÉ Run Integration Test (test_cube_slip)
        id: integration_test_cube_slip
        run: |
          STEP_FILE="tests/test_models/test_cube.step"
          EXPECTED_OUTPUT_PATH="tests/test_models/test_cube_output_slip.json"
          TEMP_OUTPUT_FILE="tests/test_models/test_cube_cli_output_slip.json"

          if [ ! -f "$STEP_FILE" ]; then
            echo "‚ùå Fatal Error: STEP file ($STEP_FILE) not found. Cannot run integration test."
            exit 1
          fi
          if [ ! -f "$EXPECTED_OUTPUT_PATH" ]; then
            echo "‚ùå Fatal Error: Expected Output file ($EXPECTED_OUTPUT_PATH) not found. Cannot run integration test."
            exit 1
          fi

          echo "--- Running test: test_cube_slip (Expected Output: $EXPECTED_OUTPUT_PATH) ---"

          RESOLUTION=0.5
          FLOW_REGION="internal"

          python3 src/gmsh_runner.py \
            --step "$STEP_FILE" \
            --resolution "$RESOLUTION" \
            --flow_region "$FLOW_REGION" \
            --no_slip false \
            --output "$TEMP_OUTPUT_FILE"

          python3 tests/helpers/compare_json.py "$EXPECTED_OUTPUT_PATH" "$TEMP_OUTPUT_FILE"

          echo "‚úÖ Integration test completed for test_cube_slip."

      # ----------------------------------------------------------------------
      # Integration Test 5: hollow_cylinder_slip (HARD FAIL on mismatch)
      # ----------------------------------------------------------------------
      - name: üèÉ Run Integration Test (hollow_cylinder_slip)
        id: integration_test_cylinder_slip
        run: |
          STEP_FILE="tests/test_models/hollow_cylinder.step"
          EXPECTED_OUTPUT_PATH="tests/test_models/hollow_cylinder_internal_output_slip.json"
          TEMP_OUTPUT_FILE="tests/test_models/hollow_cylinder_cli_output_slip.json"

          if [ ! -f "$STEP_FILE" ]; then
            echo "‚ùå Fatal Error: STEP file ($STEP_FILE) not found. Cannot run integration test."
            exit 1
          fi
          if [ ! -f "$EXPECTED_OUTPUT_PATH" ]; then
            echo "‚ùå Fatal Error: Expected Output file ($EXPECTED_OUTPUT_PATH) not found. Cannot run integration test."
            exit 1
          fi

          echo "--- Running test: hollow_cylinder_slip (Expected Output: $EXPECTED_OUTPUT_PATH) ---"

          RESOLUTION=0.5
          FLOW_REGION="internal"

          python3 src/gmsh_runner.py \
            --step "$STEP_FILE" \
            --resolution "$RESOLUTION" \
            --flow_region "$FLOW_REGION" \
            --no_slip false \
            --output "$TEMP_OUTPUT_FILE"

          python3 tests/helpers/compare_json.py "$EXPECTED_OUTPUT_PATH" "$TEMP_OUTPUT_FILE"

          echo "‚úÖ Integration test completed for hollow_cylinder_slip."

      # ----------------------------------------------------------------------
      # Integration Test 6: cube_with_hole_slip (HARD FAIL on mismatch)
      # ----------------------------------------------------------------------
      - name: üèÉ Run Integration Test (cube_with_hole_slip)
        id: integration_test_cube_with_hole_slip
        run: |
          STEP_FILE="tests/test_models/cube_with_hole.step"
          EXPECTED_OUTPUT_PATH="tests/test_models/cube_with_hole_internal_output_slip.json"
          TEMP_OUTPUT_FILE="tests/test_models/cube_with_hole_cli_output_slip.json"

          if [ ! -f "$STEP_FILE" ]; then
            echo "‚ùå Fatal Error: STEP file ($STEP_FILE) not found. Cannot run integration test."
            exit 1
          fi
          if [ ! -f "$EXPECTED_OUTPUT_PATH" ]; then
            echo "‚ùå Fatal Error: Expected Output file ($EXPECTED_OUTPUT_PATH) not found. Cannot run integration test."
            exit 1
          fi

          echo "--- Running test: cube_with_hole_slip (Expected Output: $EXPECTED_OUTPUT_PATH) ---"

          RESOLUTION=0.5
          FLOW_REGION="internal"

          python3 src/gmsh_runner.py \
            --step "$STEP_FILE" \
            --resolution "$RESOLUTION" \
            --flow_region "$FLOW_REGION" \
            --no_slip false \
            --output "$TEMP_OUTPUT_FILE"

          python3 tests/helpers/compare_json.py "$EXPECTED_OUTPUT_PATH" "$TEMP_OUTPUT_FILE"

          echo "‚úÖ Integration test completed for cube_with_hole_slip."

      # ----------------------------------------------------------------------
      # Integration Test 7: hollow_cylinder_external_output_slip (HARD FAIL on mismatch)
      # ----------------------------------------------------------------------
      - name: üèÉ Run Integration Test (hollow_cylinder_external_output_slip)
        id: integration_test_hollow_cylinder_external_output_slip
        run: |
          STEP_FILE="tests/test_models/hollow_cylinder.step"
          EXPECTED_OUTPUT_PATH="tests/test_models/hollow_cylinder_external_output_slip.json"
          TEMP_OUTPUT_FILE="tests/test_models/hollow_cylinder_cli_output_slip.json"

          if [ ! -f "$STEP_FILE" ]; then
            echo "‚ùå Fatal Error: STEP file ($STEP_FILE) not found. Cannot run integration test."
            exit 1
          fi
          if [ ! -f "$EXPECTED_OUTPUT_PATH" ]; then
            echo "‚ùå Fatal Error: Expected Output file ($EXPECTED_OUTPUT_PATH) not found. Cannot run integration test."
            exit 1
          fi

          echo "--- Running test: hollow_cylinder_external_output_slip (Expected Output: $EXPECTED_OUTPUT_PATH) ---"

          RESOLUTION=0.5
          FLOW_REGION="external"
          PADDING_FACTOR=1

          python3 src/gmsh_runner.py \
            --step "$STEP_FILE" \
            --resolution "$RESOLUTION" \
            --flow_region "$FLOW_REGION" \
            --padding_factor "$PADDING_FACTOR" \
            --no_slip false \
            --output "$TEMP_OUTPUT_FILE"

          python3 tests/helpers/compare_json.py "$EXPECTED_OUTPUT_PATH" "$TEMP_OUTPUT_FILE"

          echo "‚úÖ Integration test completed for hollow_cylinder_external_output_slip."

      - name: üß† Extract config & run Gmsh
        run: |
          resolution=$(python -c "import json; print(json.load(open('data/testing-input-output/flow_data.json'))['model_properties']['default_resolution'])")
          flow_region=$(python -c "import json; print(json.load(open('data/testing-input-output/flow_data.json'))['model_properties']['flow_region'])")
          no_slip=$(python -c "import json; print(json.load(open('data/testing-input-output/flow_data.json'))['model_properties']['no_slip'])")

          python3 src/gmsh_runner.py \
            --step data/testing-input-output/input.step \
            --resolution "$resolution" \
            --flow_region "$flow_region" \
            --no_slip "$no_slip" \
            --output data/testing-input-output/geometry_masking_gmsh.json

      - name: üîç Validate output JSON against schema
        run: |
          python -c "
          import json, jsonschema
          from pathlib import Path
          output_path = Path('data/testing-input-output/geometry_masking_gmsh.json')
          if not output_path.exists():
            raise FileNotFoundError(f'Schema validation failed ‚Äî file not found: {output_path}')
          with open('schemas/domain_schema.json') as s, open(output_path) as d:
            schema = json.load(s)
            data = json.load(d)
            jsonschema.validate(instance=data, schema=schema)
          "
          echo "‚úÖ Output schema validated"

      - name: üß™ Run Unit Tests with Coverage
        run: |
          pytest --cov=src --cov-report=term-missing
          echo "‚úÖ Unit tests and code coverage check completed."

      - name: ‚òÅÔ∏è Upload outputs to Dropbox
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: |
          chmod +x src/upload_to_dropbox.sh
          src/upload_to_dropbox.sh

      - name: üìù Log trigger & push
        if: always() # Run even if previous steps failed to ensure log and error reports are committed
        env:
          GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
        run: |
          echo "$(date '+%Y-%m-%d %H:%M:%S'): STEP processor triggered by '${{ github.actor }}' via '${{ github.event_name }}' event" >> trigger.txt
          git config --global user.name "${GIT_USER_NAME}"
          git config --global user.email "${GIT_USER_EMAIL}"

          # Commit error reports and trigger log
          if [ -d "tests/integration_tests_errors" ]; then
            find tests/integration_tests_errors -type f -print0 | while IFS= read -r -d $'\0' file; do
              echo -e "\n--- Commit Details: Run ${{ github.run_id }} / Attempt ${{ github.run_attempt }} ---" >> "$file"
            done
            git add --force tests/integration_tests_errors
            echo "‚ö†Ô∏è Added error reports for commit."
          fi

          git add trigger.txt
          git commit -m "Log STEP processor trigger by ${{ github.actor }} via ${{ github.event_name }}" || echo "No new log or errors to commit"

          # Pull and rebase before pushing to avoid rejection
          git pull --rebase origin main || echo "‚ö†Ô∏è Rebase failed ‚Äî check for conflicts"
          git push origin main || echo "‚ùå Push failed ‚Äî remote may have diverged"



